# This is the lodi validation case from Poinsot and Lele [Boundary Conditions for Direct Simulations of Compressible Viscous Flows](https://www.sciencedirect.com/science/article/pii/0021999192900462)
#


environment:
  title: _compressibleFlowVortex
  tagDirectory: false
arguments: {}
# set up the time stepper responsible for marching in time
timestepper:
  # use io to save results to a file allowing visualization and restart
  io:
    interval: 100

  name: theMainTimeStepper
  # time stepper specific input arguments
  arguments:
    ts_type: rk
    ts_adapt_type: none
    ts_max_steps: 15000

  # the BoxMeshBoundaryCells domain adds an extra layer of boundary cells to the outside of the domain and
  # tags these cells with special labels
  domain: !ablate::domain::BoxMeshBoundaryCells
    name: simpleBoxField
    faces: [ 20, 20]
    lower: [ 0.0, 0 ]
    upper: [ 2.0, 1 ]
    simplex: false
    # pass in these options to petsc when setting up the domain.  Using an option list here prevents command line arguments from being seen.
    options:
      dm_refine: 0 # must be zero when using the BoxMeshBoundaryCells
    preModifiers:
      # if using mpi, this modifier distributes cells
      - !ablate::domain::modifiers::DistributeWithGhostCells
    # add any modifications after the ghost boundaries have been set up
    postModifiers:

      - !ablate::domain::modifiers::GhostBoundaryCells
    fields:
      # all fields must be defined before solvers.  The ablate::finiteVolume::CompressibleFlowFields is a helper
      # class that creates the required fields for the compressible flow solver (rho, rhoE, rhoU, ...)
      - !ablate::finiteVolume::CompressibleFlowFields
        eos: !ablate::eos::PerfectGas &eos
          parameters:
            gamma: 1.4
            Rgas : 287.0
        extraVariables: [ "ev1" ]

        # define the field only over the domain cells, this prevents cells from being defined in unused corners
        region:
          name: domain

  # set the initial conditions of the flow field
  initialization:
    # The ablate::finiteVolume::CompressibleFlowFields is a helper class that creates the required fields for the compressible flow solver (rho, rhoE, rhoU, ...)
    - !ablate::finiteVolume::fieldFunctions::Euler
      state: &flowFieldState

        eos: *eos
        pressure: 100000

        temperature: 300
        velocity: 1,0
    - !ablate::finiteVolume::fieldFunctions::DensityExtraVariables
      &densityEVFlowFieldState
      state: *flowFieldState
      # a list of functions used to describe the extra variable initialization
      functions:
        - .093 # ev1 is set to a constant value of 0.25
solvers:
  # The compressible flow solver will solve the compressible flow equations over the interiorCells
  - !ablate::finiteVolume::CompressibleFlowSolver
    id: vortexFlowField

    # only apply this solver to the interior cells
    region:
      name: interiorCells

    # a flux calculator must be specified to so solver for advection
    fluxCalculator: !ablate::finiteVolume::fluxCalculator::AusmpUp
      mInf: .3

    # cfl is used to compute the physics time step
    parameters:
      cfl: 0.1

    # the default transport object assumes constant values for k, mu, diff
    transport:
      mu:  0.02071398139
    eos: *eos

    additionalProcesses:
       # the ArbitrarySource process was added to define a region of additional ev source
      - !ablate::finiteVolume::processes::LES
         tke: ev1
         eos: *eos
    monitors:
    # output the time and dt at each time step
      - !ablate::monitors::TimeStepMonitor
    # share the existing eos with the compressible flow solver

    # overwrite and set the time step based upon the CFL constraint
    computePhysicsTimeStep: true

  # use a boundary solver to update the cells in the boundaryCellsLeft region to represent an inlet
  - !ablate::boundarySolver::BoundarySolver
    id: inlet
    region:
      name: boundaryCellsLeft
    fieldBoundary:
      name: boundaryFaces
    processes:
      - !ablate::boundarySolver::lodi::Inlet #the inlet velocity is selected from the initial conditions
        eos: *eos
        velocity: !ablate::mathFunctions::ParsedSeries
          upperBound: 5000
          lowerBound: 1
          formula: 2 * sqrt(1.453 * exp(-2 * (((100/9) + (3.14/(2*3.14*9/100/8) - (100/9)) * (i - 1)  / 5000) / 4819) ^ 2) * (.25^2 / 25.82) * (((100/9)+ (3.14/(2*3.14*9/100/8)- (100/9)) * (i - 1)  / 5000)/ 25.82) ^ 4 / (1* (1 + (((100/9) + (3.14/(2*3.14*9/100/8)- (100/9)) * (i - 1)  / 5000) / 25.82) )^ (17/6)))* cos( ((100/9) + (3.14/(2*3.14*9/100/8) - (100/9)) * (i - 1)  / 5000) * (2/(2*3.14*9/100/8))*sin(.5* ((100/9) + (3.14/(2*3.14*9/100/8) - (100/9)) * (i - 1)  / 5000)* (2*3.14*9/100/8)*sin( acos(rand(-1,1))) * cos(rand(0,2*3.14)) )* x + (rand(-3.14/2,3.14/2))),  2 * sqrt(1.453 * exp(-2 * (((100/9) + (3.14/(2*3.14*9/100/8) - (100/9)) * (i - 1)  / 5000) / 4819) ^ 2) * (.25^2 / 25.82) * (((100/9)+ (3.14/(2*3.14*9/100/8)- (100/9)) * (i - 1)  / 5000)/ 25.82) ^ 4 / (1* (1 + (((100/9) + (3.14/(2*3.14*9/100/8)- (100/9)) * (i - 1)  / 5000) / 25.82) )^ (17/6)))* cos( ((100/9) + (3.14/(2*3.14*9/100/8) - (100/9)) * (i - 1)  / 5000) * (2/(2*3.14*9/100/8))*sin(.5* ((100/9) + (3.14/(2*3.14*9/100/8) - (100/9)) * (i - 1)  / 5000)* (2*3.14*9/100/8)*sin( acos(rand(-1,1))) * sin(rand(0,2*3.14)) )* y + (rand(-3.14/2,3.14/2)))

  # use a boundary solver to update the cells in the openBoundaryLabel region to represent an open boundary
  - !ablate::boundarySolver::BoundarySolver
    id: openBoundary
    region:
      name: boundaryCellsRight
    fieldBoundary:
      name: boundaryFaces
    processes:
      - !ablate::boundarySolver::lodi::OpenBoundary
        eos: *eos
        reflectFactor: 0.0
        referencePressure: 101325.0
        maxAcousticsLength: 1
  - !ablate::boundarySolver::BoundarySolver
    id: topBoundary
    region:
      name: boundaryCellsTop
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::IsothermalWall
        eos: *eos

  - !ablate::boundarySolver::BoundarySolver
    id: bottomBoundary
    region:
      name: boundaryCellsBottom
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::IsothermalWall
        eos: *eos
